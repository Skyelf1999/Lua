---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 14563.
--- DateTime: 2022/4/29 9:56
---

require("structure")


Set = {}
local metatable_Set = {}   -- 元表

-- 创建新的集合，处于集合中的元素表现为：set[data]=true
function Set.new(l)
    local set = {}
    setmetatable(set, metatable_Set)    -- 将mt设置为当前所创建的table的元表
    for _,v in ipairs(l) do
        set[v] = true
    end
    return set
end

-- 并集
function Set.union(a,b)
    local res = Set.new{}
    for k in pairs(a) do res[k]=true end
    for k in pairs(b) do res[k]=true end
    return res
end

-- 交集
function Set.intersection(a,b)
    local res = Set.new{}
    for k in pairs(a) do
        res[k] = b[k]
    end
    return res
end

-- 输出
function Set.tostring(set)
    local l = {}
    for e in pairs(set) do
        l[#l+1] = e
    end
    return "{" .. table.concat(l,",") .. "}"
end
function Set.print(s)
    print(Set.tostring(s))
end


------------------------------- 算数类的元方法 -------------------------------
structure.Func_type("算数类的元方法",true)

-- 元方法
metatable_Set.__add = Set.union
metatable_Set.__mul = Set.intersection

set_1 = Set.new{1,2,3}
set_2 = Set.new{2,3,4}
-- 根据new方法，二者具有相同的元表mt
print(getmetatable(set_1),getmetatable(set_2))
-- 测试元方法
Set.print(set_1 + set_2)
Set.print(set_1 * set_2)


structure.Func_type("算数类的元方法",false)
------------------------------- 算数类的元方法 -------------------------------


------------------------------- 关系类的元方法 -------------------------------
structure.Func_type("关系类的元方法",true)

-- 子集判断
metatable_Set.__le = function(a, b)
    for k in pairs(a) do
        if not b(k) then return false end
    end
    return true     -- a是b的子集
end

-- 真子集判断
metatable_Set.__lt = function(a,b)
    return a<=b and not (b<=a)
end

-- 集合相等判断
metatable_Set.__eq = function(a,b)
    return a<=b and b<=a
end

structure.Func_type("关系类的元方法",false)
------------------------------- 关系类的元方法 -------------------------------










