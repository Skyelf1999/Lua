---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 14563.
--- DateTime: 2022/5/1 22:41
---

require("structure")
local Func_type = structure.Func_type

------------------------------- 类定义 -------------------------------

-- Account类：存款数balance
Account = {balance=0}
function Account:new(o)     -- 构造方法
    o = o or {}             -- 新对象
    setmetatable(o,self)    -- 将Account作为新对象的元表，即将基本属性附加给新对象
    self.__index = self     -- 使Account.__index = Account
    return o
end
-- 取钱
function Account:withdraw(v)
    if v>self.balance then
        error("该账户无法透支！当前余额：" .. self.balance)
    end
    self.balance = self.balance - v
end
-- 存钱
function Account:deposit(v)
    self.balance = self.balance + v
end
-- 查余额
function Account:getBalance()
    return self.balance
end
function Account:printBalance()
    print("当前余额：" .. self.balance)
end

------------------------------- 类定义 -------------------------------


------------------------------- 对象创建 -------------------------------
Func_type("对象创建",true)

a = Account:new({balance=10})
print("新账户存款：" .. a.balance)
a:deposit(70)
a:withdraw(20)
print(a:getBalance())

b = Account:new()
print("无初始存款的新用户存款数量（由Account的balance决定）：" .. b.balance)

Func_type("对象创建",false)
------------------------------- 对象创建 -------------------------------


------------------------------- 子类继承 -------------------------------
Func_type("子类继承",true)

-- 子类：Vip账户
Account_Vip = Account:new({limit=100})
-- 重写取款
function Account_Vip:withdraw(v)
    print("提示：该账户为Vip账户，可以透支，当前余额：" .. self.balance)
    if v>self.balance then  -- 需要透支
        if self.balance-v<-self.limit then
            print("超出透支额度！")
        else                -- 未超额度
            self.balance = self.balance - v
            print("当前已透支："..self.balance.." 元")
        end
    else
        self.balance = self.balance - v
    end
end

vip_1 = Account_Vip:new()
print(vip_1:getBalance())
vip_1:withdraw(50)
print(vip_1:getBalance())
vip_1:withdraw(60)

Func_type("子类继承",false)
------------------------------- 子类继承 -------------------------------


--------------------------------- 类定义 -------------------------------
--
--Named = {}
--function Named:getName()
--    return self.name
--end
--function Named:setName(n)
--    self.name = n
--end
--function Named:printName()
--    print("name = " .. self.name)
--    return
--end
--
--------------------------------- 类定义 -------------------------------
--
--
--------------------------------- 多继承类构造器定义 -------------------------------
--
---- 在plist中寻找字段为k的内容
--local function search(k, plist)
--    for i=1,#plist do
--        local v = plist[i][k]
--        if v then return v end
--    end
--end
--
--
---- 新类构造器：基于输入的类，创造多继承子类
--function createClass(...)
--    local new_class = {}
--    local parents = {...}
--    -- 设置多继承类的 元表.__index字段 对应的搜索函数
--    setmetatable(new_class,
--            {__idnex = function(t,k)
--                return search(k,parents)
--            end}
--    )
--    new_class.__idnex = new_class
--    -- 新类的构造函数
--    function new_class:new(o)
--        o = o or {}
--        setmetatable(o, new_class)
--        return o
--    end
--
--    return new_class
--end
--
--------------------------------- 多继承类构造器定义 -------------------------------
--
--
--------------------------------- 多继承类定义 -------------------------------
--
--Named_Account = createClass(Account,Named)
--account = Named_Account:new({name = "dsh"})
--print(account:getName())
--
--------------------------------- 多继承类定义 -------------------------------

















