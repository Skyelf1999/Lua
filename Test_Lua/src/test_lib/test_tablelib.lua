---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 14563.
--- DateTime: 2022/5/9 21:28
---

require("structure")
Func_type = structure.Func_type


------------------------------- 排序 -------------------------------
Func_type("排序",true)

lines = {set = 10,get = 24, present = 48}
a = {}
for key in pairs(lines) do
    print(key)
    a[#a+1]=key
end
table.sort(a)
for i,n in ipairs(a) do print(i,n) end

--索引排序迭代器
function paris_key(t,compare_func)
    local a = {}
    for n in pairs(t) do    -- 存储索引
        a[#a+1]=n
    end
    table.sort(a,f)         -- 将索引排序
    local i = 0             -- 将迭代变量保存入closure
    return function()       -- 迭代器函数
        i = i+1
        return a[i],t[a[i]]
    end
end

Func_type("排序",false)
------------------------------- 排序 -------------------------------


------------------------------- 连接 -------------------------------
Func_type("连接",true)

str_table = {"I'm","a","student"}
str = table.concat(str_table," ")
print("数组中的字符串连接后："..str)

-- 处理嵌套字符串的连接
function rconcat(l)
    -- 无嵌套，返回结果
    if type(l)~="table" then return l end
    local res = {}
    for i=1,#l do
        res[i] = rconcat(l[i])
    end
    return table.concat(res)
end

Func_type("连接",false)
------------------------------- 连接 -------------------------------




